#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX 100
#define MAX_NAME 50
#define MAX_GRADES 10

typedef struct {
    char name[MAX_NAME];
    char student_code[10];
    int grades[MAX_GRADES];
    int grade_count;
    int scholarship;
} Student;

void readFile1(const char *filename, Student *students, int *count);
void processStudents(Student *students, int count);
void writeFile2(const char *filename, Student *students, int count);
void displayScholarshipCount(Student *students, int count);
void Error(const char *message);
int compareStudents(const void *a, const void *b);

int main()
{
    Student students[MAX];
    int count = 0;

    readFile1("F1.txt", students, &count);
    processStudents(students, count);
    writeFile2("scholarship.txt", students, count);
    displayScholarshipCount(students, count);

    return 0;
}

void readFile1(const char *filename, Student *students, int *count)
{
    FILE *file1 = fopen("F1.txt", "r");
    if (file1 == NULL)
    {
        Error("Error opening file F1.txt");
    }

    while (fscanf(file1, "%49s %9s", students[*count].name, students[*count].student_code) == 2)
    {
        students[*count].grade_count = 0;
        
        while (students[*count].grade_count < MAX_GRADES && fscanf(file1, "%d", &students[*count].grades[students[*count].grade_count]) == 1)
        {
            students[*count].grade_count++;
        }
        
        (*count)++;
    }
    
    fclose(file1);
}

void processStudents(Student *students, int count)
{
	int i;
	int j;
	
    for (i = 0; i < count; i++)
    {
        int all_five = 1, only_four_or_five = 1;
        for (j = 0; j < students[i].grade_count; j++)
        {
            if (students[i].grades[j] != 5) all_five = 0;
            if (students[i].grades[j] < 4)
            {
                only_four_or_five = 0;
                break;
            }
        }
        if (all_five)
            students[i].scholarship = 100;
        else if (only_four_or_five)
            students[i].scholarship = 75;
        else
            students[i].scholarship = 0;
    }
}

int compareStudents(const void *a, const void *b)
{
    Student *s1 = (Student *)a;
    Student *s2 = (Student *)b;
    
    if (s1->scholarship != s2->scholarship)
        return s2->scholarship - s1->scholarship;
    
    return strcmp(s1->name, s2->name);
}

void writeFile2(const char *filename, Student *students, int count)
{
    FILE *file2 = fopen("scholarship.txt", "w");
    if (!file2)
    {
        Error("Error opening file scholarship.txt");
    }

    qsort(students, count, sizeof(Student), compareStudents);

	int i;

    for (i = 0; i < count; i++)
    {
        fprintf(file2, "%s %s ", students[i].name, students[i].student_code);

        if (students[i].scholarship > 0)
        {
            fprintf(file2, "Scholarship: %d\n", students[i].scholarship);
        }
        else
        {
            fprintf(file2, "No scholarship\n");
        }
    }

    fclose(file2);
}

void displayScholarshipCount(Student *students, int count)
{
	int i;
    int scholarshipCount = 0;
    
    for (i = 0; i < count; i++)
    {
        if (students[i].scholarship > 0)
        {
            scholarshipCount++;
        }
    }

    printf("%d students received a scholarship.\n", scholarshipCount);
}

void Error(const char *message)
{
    FILE *errorFile = fopen("error.txt", "w");
    if (errorFile)
    {
        fprintf(errorFile, "%s\n", message);
        fclose(errorFile);
    }
    printf("%s\n", message);
    exit(1);
}

